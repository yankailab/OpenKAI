cmake_minimum_required(VERSION 3.18)
project(OpenKAI VERSION 0.0.1)
set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "")

LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

OPTION(BUILD_AS_LIB "Build as library" OFF)
option(BUILD_SHARED_LIBS "Build shared library" ON)

OPTION(USE_CUDA "Use NVIDIA CUDA" OFF)
OPTION(USE_CHILITAGS "Use Chilitags" OFF)
OPTION(USE_DYNAMIXEL "Use Dynamixel" OFF)
OPTION(USE_FEETECH "Use Feetech" OFF)
OPTION(USE_GUI "Use GUI" OFF)
OPTION(USE_GLOG "Use glog" ON)
OPTION(USE_INFIRAY "Use InfiRay" OFF)
OPTION(USE_JETSON_INFERENCE "Use Jetson Inference" OFF)
OPTION(USE_MATHGL "Use MathGL" OFF)
OPTION(USE_OPEN3D "Use Open3D" OFF)
OPTION(USE_OPENCL "Use OpenCL" OFF)
OPTION(USE_OPENCV "Use OpenCV" OFF)
OPTION(USE_OPENCV_CONTRIB "Use OpenCV contribution" OFF)
OPTION(USE_ORBBEC "Use Orbbec" OFF)
OPTION(USE_QC "Use QC" OFF)
OPTION(USE_REALSENSE "Use Intel RealSense" OFF)
OPTION(USE_ROS "Use ROS" OFF)
OPTION(USE_TF-LITE "Use TensorFlow-Lite" OFF)
OPTION(USE_SCEPTER_SDK "Use Scepter SDK" OFF)
OPTION(USE_WSSERVER "Use wsServer" OFF)
OPTION(USE_XDYNAMICS "Use XDynamics SDK" OFF)
OPTION(USE_XARM "Use xArm" OFF)

OPTION(WITH_DEFAULT_MODULES "" OFF)

OPTION(WITH_3D "" OFF)
OPTION(WITH_ACTUATOR "" OFF)
OPTION(WITH_APMAVLINK "" OFF)
OPTION(WITH_AUTOPILOT_DRIVE "" OFF)
OPTION(WITH_COMPUTE "" OFF)
OPTION(WITH_CONTROL "" OFF)
OPTION(WITH_FILE "" OFF)
OPTION(WITH_DETECTOR "" OFF)
OPTION(WITH_DNN "" OFF)
OPTION(WITH_FILTER "" OFF)
OPTION(WITH_IO "" OFF)
OPTION(WITH_NAVIGATION "" OFF)
OPTION(WITH_NET "" OFF)
OPTION(WITH_PROTOCOL "" OFF)
OPTION(WITH_ROS "" OFF)
OPTION(WITH_SCIENCE "" OFF)
OPTION(WITH_SENSOR "" OFF)
OPTION(WITH_SLAM "" OFF)
OPTION(WITH_STATE "" OFF)
OPTION(WITH_SWARM "" OFF)
OPTION(WITH_UI "" OFF)
OPTION(WITH_UNIVERSE "" OFF)
OPTION(WITH_VISION "" OFF)
OPTION(WITH_TEST "Build with unit test modules" OFF)

find_package(Eigen3 3.1.0 REQUIRED)
#find_package(Eigen3 3.1.0 REQUIRED NO_MODULE)

#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -O3")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O3")
#set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -march=native")
#set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

#set(OpenKAI_definitions "-O3 -w -Wall -c -fmessage-length=0 -MMD -MP -std=c++17")
set(OpenKAI_definitions "-w -Wall -c -fmessage-length=0 -MMD -MP")
set(OpenKAI_libDir /usr/lib /usr/local/lib)
set(OpenKAI_include /usr/local/include /usr/include ${EIGEN3_INCLUDE_DIR})
set(OpenKAI_lib pthread uuid ${EIGEN3_LIBS} gsl gslcblas ncurses ssl crypto rt uvc usb-1.0)


# Common
file(GLOB_RECURSE OpenKAI_cpp src/main.cpp src/OpenKAI.cpp src/Base/*.cpp src/Base/*.cc src/Base/*.c)

file(GLOB_RECURSE Arithmetic_cpp src/Arithmetic/*.cpp src/Arithmetic/*.cc src/Arithmetic/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Arithmetic_cpp})

file(GLOB_RECURSE Module_cpp src/Module/*.cpp src/Module/*.cc src/Module/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Module_cpp})

file(GLOB_RECURSE IPC_cpp src/IPC/*.cpp src/IPC/*.cc src/IPC/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${IPC_cpp})

file(GLOB_RECURSE Primitive_cpp src/Primitive/*.cpp src/Primitive/*.cc src/Primitive/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Primitive_cpp})

set(OpenKAI_cpp ${OpenKAI_cpp} src/UI/_Console.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Data/_FileBase.cpp)


# Apps
if(WITH_DEFAULT_MODULES)
SET(USE_OPENCV ON CACHE BOOL "" FORCE)
SET(USE_OPENCV_CONTRIB ON CACHE BOOL "" FORCE)
SET(WITH_ACTUATOR ON CACHE BOOL "" FORCE)
SET(WITH_APMAVLINK ON CACHE BOOL "" FORCE)
SET(WITH_CONTROL ON CACHE BOOL "" FORCE)
SET(WITH_DETECTOR ON CACHE BOOL "" FORCE)
SET(WITH_FILE ON CACHE BOOL "" FORCE)
SET(WITH_FILTER ON CACHE BOOL "" FORCE)
SET(WITH_IO ON CACHE BOOL "" FORCE)
SET(WITH_NET ON CACHE BOOL "" FORCE)
SET(WITH_PROTOCOL ON CACHE BOOL "" FORCE)
SET(WITH_SENSOR ON CACHE BOOL "" FORCE)
SET(WITH_STATE ON CACHE BOOL "" FORCE)
SET(WITH_UI ON CACHE BOOL "" FORCE)
SET(WITH_UNIVERSE ON CACHE BOOL "" FORCE)
SET(WITH_VISION ON CACHE BOOL "" FORCE)
endif()

# Optional modules
if(WITH_3D)
add_definitions(-DWITH_3D)
if(USE_OPEN3D)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/_GeometryBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/Mesh/_MeshStream.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/_PCstream.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/_PCframe.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/_PCgrid.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/_PCfile.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/_PCmerge.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/_PCsend.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/_PCrecv.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/PCfilter/_PCtransform.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/PCfilter/_PCcrop.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/PCfilter/_PCremove.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/PCfilter/_PCdownSample.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/PCregistration/_PCregistCol.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/PCregistration/_PCregistICP.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/PointCloud/PCregistration/_PCregistGlobal.cpp)
if(USE_GUI)
set(OpenKAI_cpp ${OpenKAI_cpp} src/3D/_GeometryViewer.cpp)
endif()
endif()
endif()

if(WITH_ACTUATOR)
add_definitions(-DWITH_ACTUATOR)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/_ActuatorBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/_ArduServo.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/_MultiActuatorsBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/_OrientalMotor.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/_HYMCU_RS485.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/Motor/_ZLAC8015.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/Motor/_ZLAC8015D.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/Motor/_ZDmotor.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/Motor/_DDSM.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/RobotArm/_Sequencer.cpp)
if(USE_FEETECH)
add_definitions(-DUSE_FEETECH)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/_Feetech.cpp)
file(GLOB_RECURSE Dependencies_Feetech src/Dependencies/Feetech/*.cpp src/Dependencies/Feetech/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Dependencies_Feetech})
endif()
if(USE_XARM)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Actuator/Articulated/_xArm.cpp)
endif()
endif()

if(WITH_APMAVLINK)
add_definitions(-DWITH_APMAVLINK)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_rcChannel.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_base.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_httpJson.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_mav2json.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_mission.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_move.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_relay.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_servo.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_drive.cpp)
if(WITH_SENSOR)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_distLidar.cpp)
endif()
if(USE_OPENCV)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_avoid.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_depthVision.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_video.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_videoStream.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_photo.cpp)
if(USE_OPENCV_CONTRIB)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_follow.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_land.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_landingTarget.cpp)
endif() #opencv_contrib
endif() #opencv
if(WITH_NAVIGATION)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_visionEstimate.cpp)
if(USE_REALSENSE)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_GPS.cpp)
endif()
endif()
if(WITH_SWARM)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Autopilot/APmavlink/_APmavlink_swarm.cpp)
endif()
endif()

if(WITH_AUTOPILOT_DRIVE)
add_definitions(-DWITH_AUTOPILOT_DRIVE)
file(GLOB_RECURSE AutopilotDrive_cpp src/Autopilot/Drive/*.cpp src/Autopilot/Drive/*.cc src/Autopilot/Drive/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${AutopilotDrive_cpp})
endif()

if(WITH_COMPUTE)
add_definitions(-DWITH_COMPUTE)
if(USE_OPENCL)
file(GLOB_RECURSE OCL_cpp src/Compute/OpenCL/*.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} ${OCL_cpp})
endif()
endif()

if(WITH_CONTROL)
add_definitions(-DWITH_CONTROL)
file(GLOB_RECURSE Control_cpp src/Control/*.cpp src/Control/*.cc src/Control/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Control_cpp})
endif()

if(WITH_DETECTOR)
add_definitions(-DWITH_DETECTOR)
if(USE_OPENCV)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_DetectorBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_Lane.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_YOLOv3.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_YOLOv8.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_DNNclassifier.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_DNNtext.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_DepthSegment.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_IRLock.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_Line.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_OpenPose.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_HandKey.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_SSD.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_Contour.cpp)
if(USE_OPENCV_CONTRIB)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_ArUco.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_MotionDetector.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Tracker/_TrackerBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Tracker/_SingleTracker.cpp)
endif()
if(USE_CUDA)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_Cascade.cpp)
endif()
if(USE_CHILITAGS)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Detector/_Chilitags.cpp)
endif()
endif()
endif()

if(WITH_DNN)
add_definitions(-DWITH_DNN)
if(USE_OPENCV)
if(USE_JETSON_INFERENCE)
file(GLOB_RECURSE JI_cpp src/DNN/JetsonInference/*.cpp src/DNN/JetsonInference/*.cc src/DNN/JetsonInference/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${JI_cpp})
endif()
if(USE_TF-LITE)
file(GLOB_RECURSE TFlite_cpp src/DNN/TensorFlowLite/*.cpp src/DNN/TensorFlowLite/*.cc src/DNN/TensorFlowLite/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${TFlite_cpp})
endif()
endif()
endif()

if(WITH_FILE)
add_definitions(-DWITH_FILE)
if(USE_OPENCV)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Data/Image/_PhotoTake.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Data/Image/_GPhotoTake.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Data/Image/_BBoxCutOut.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Data/Image/_CutOut.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Data/Image/_GDimgUploader.cpp)
endif()
endif()

if(WITH_FILTER)
add_definitions(-DWITH_FILTER)
file(GLOB_RECURSE Filter_cpp src/Filter/*.cpp src/Filter/*.cc src/Filter/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Filter_cpp})
endif()

if(WITH_IO)
add_definitions(-DWITH_IO)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_ADIO_EBYTE.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_ADIObase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_File.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_IObase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_SerialPort.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_TCPclient.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_TCPserver.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_UDP.cpp)
if(USE_WSSERVER)
add_definitions(-DUSE_WSSERVER)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_WebSocket.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/IO/_WebSocketServer.cpp)
set(OpenKAI_lib ${OpenKAI_lib} ws)
endif()
endif()

if(WITH_NAVIGATION)
add_definitions(-DWITH_NAVIGATION)
file(GLOB_RECURSE Dependencies_nav src/Dependencies/minmea.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Dependencies_nav})
set(OpenKAI_cpp ${OpenKAI_cpp} src/Navigation/_NavBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Navigation/Coordinate.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Navigation/_GPS.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Navigation/_RTCM3.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Navigation/GeoGrid.cpp)
if(USE_REALSENSE)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Navigation/_RStracking.cpp)
endif()
endif()

if(WITH_NET)
add_definitions(-DWITH_NET)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Net/base64.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Net/_Uploader.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Net/HttpClient.cpp)
set(OpenKAI_lib ${OpenKAI_lib} event event_core)
endif()

if(WITH_PROTOCOL)
add_definitions(-DWITH_PROTOCOL)
file(GLOB_RECURSE Protocol_cpp src/Protocol/*.cpp src/Protocol/*.cc src/Protocol/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Protocol_cpp})
file(GLOB_RECURSE Dependencies_mdb src/Dependencies/libmodbus/*.cpp src/Dependencies/libmodbus/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Dependencies_mdb})
file(GLOB_RECURSE Dependencies_mvl src/Dependencies/c_library_v2/*.cpp src/Dependencies/c_library_v2/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Dependencies_mvl})
endif()

if(WITH_ROS)
add_definitions(-DWITH_ROS)
file(GLOB_RECURSE ROS_cpp src/ROS/*.cpp src/ROS/*.cc src/ROS/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${ROS_cpp})
endif()

if(WITH_SCIENCE)
add_definitions(-DWITH_SCIENCE)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Science/_IsingSolver.cpp)
if(USE_QC)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Science/_QCbase.cpp)
endif()
if(USE_MATHGL)
#set(OpenKAI_cpp ${OpenKAI_cpp} src/Science/_ScienceBase.cpp)
endif()
endif()

if(WITH_SENSOR)
add_definitions(-DWITH_SENSOR)
file(GLOB_RECURSE Dependencies_sensor src/Dependencies/SensorFusion/*.cpp src/Dependencies/SensorFusion/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Dependencies_sensor})
set(OpenKAI_cpp ${OpenKAI_cpp} src/Sensor/Distance/_DistSensorBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Sensor/Distance/_LeddarVu.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Sensor/Distance/_TOFsense.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Sensor/Distance/_BenewakeTF.cpp)
if(WITH_3D AND USE_OPEN3D)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Sensor/LiDAR/_Livox2.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Sensor/LiDAR/_RoboSenseAiry.cpp)
endif() # 3D
endif() # sensor

if(WITH_SLAM AND WITH_NAVIGATION)
add_definitions(-DWITH_SLAM)
if(USE_OPENCV)
file(GLOB_RECURSE SLAM_cpp src/SLAM/*.cpp src/SLAM/*.cc src/SLAM/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${SLAM_cpp})
endif()
endif()

if(WITH_STATE)
add_definitions(-DWITH_STATE)
file(GLOB_RECURSE State_cpp src/State/*.cpp src/State/*.cc src/State/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${State_cpp})
endif()

if(WITH_SWARM)
add_definitions(-DWITH_SWARM)
file(GLOB_RECURSE Swarm_cpp src/Swarm/*.cpp src/Swarm/*.cc src/Swarm/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Swarm_cpp})
endif()

if(WITH_UI)
add_definitions(-DWITH_UI)
set(OpenKAI_cpp ${OpenKAI_cpp} src/UI/_UIbase.cpp)
if(USE_OPENCV)
set(OpenKAI_cpp ${OpenKAI_cpp} src/UI/_GstOutput.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/UI/_WindowCV.cpp)
endif()
if(USE_GUI)
if(USE_OPEN3D)
set(OpenKAI_cpp ${OpenKAI_cpp} src/UI/O3DUI.cpp)
endif()
endif()
endif()

if(WITH_UNIVERSE)
add_definitions(-DWITH_UNIVERSE)
file(GLOB_RECURSE Universe_cpp src/Universe/*.cpp src/Universe/*.cc src/Universe/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Universe_cpp})
endif()

if(WITH_VISION)
add_definitions(-DWITH_VISION)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_VisionBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/RGBD/_RGBDbase.cpp)
if(USE_ORBBEC)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/RGBD/_Orbbec.cpp)
endif()
if(USE_REALSENSE)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/RGBD/_RealSense.cpp)
endif()
if(USE_SCEPTER_SDK)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/RGBD/_Scepter.cpp)
endif()
if(USE_XDYNAMICS)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/RGBD/_XDynamics.cpp)
endif()
if(USE_OPENCV)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/FrameBase.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_Camera.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_UVC.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_CamCalib.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_SharedMemImg.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_VideoFile.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_ImgFile.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_GStreamer.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_GPhoto.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_DepthProj.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_DepthShow.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Morphology.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Mask.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Threshold.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Contrast.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Crop.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Depth2Gray.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Erode.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_ColorConvert.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_HistEqualize.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Invert.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_InRange.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Resize.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Remap.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/ImgFilter/_Rotate.cpp)
if(USE_INFIRAY)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_InfiRay.cpp)
endif()
if(USE_CUDA)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/FrameGPU.cpp)
set(OpenKAI_cpp ${OpenKAI_cpp} src/Vision/_DenseFlow.cpp)
endif()
endif()
endif()

# Test modules

if(WITH_TEST)
add_definitions(-DWITH_TEST)
set(OpenKAI_cpp ${OpenKAI_cpp} test/_TestBase.cpp)

if(WITH_IO)
if(USE_WSSERVER)
set(OpenKAI_cpp ${OpenKAI_cpp} test/IO/_TestWebSocket.cpp)
endif()
endif()


if(WITH_PROTOCOL)
file(GLOB_RECURSE Test_Protocol test/Protocol/*.cpp test/Protocol/*.c)
set(OpenKAI_cpp ${OpenKAI_cpp} ${Test_Protocol})
endif()

endif()


# Dependencies

if(USE_CHILITAGS)
  add_definitions(-DUSE_CHILITAGS)
  set(OpenKAI_lib ${OpenKAI_lib} chilitags)
endif()

if(USE_CUDA)
  add_definitions(-DUSE_CUDA)
  set(CUDA_include "/usr/local/cuda/include" CACHE STRING "")
  set(OpenKAI_include ${OpenKAI_include} ${CUDA_include})
  set(CUDA_ARCH "72" CACHE STRING "")
  set(OpenKAI_lib ${OpenKAI_lib} opencv_cudawarping opencv_cudaobjdetect opencv_cudaarithm opencv_cudabgsegm opencv_cudaimgproc opencv_cudaoptflow opencv_cudastereo)
endif()

if(USE_DYNAMIXEL)
  add_definitions(-DUSE_DYNAMIXEL)
  set(OpenKAI_lib ${OpenKAI_lib} dxl_x64_cpp)
endif()

if(USE_GLOG)
  add_definitions(-DUSE_GLOG)
  set(OpenKAI_lib ${OpenKAI_lib} glog)
endif()

if(USE_GUI)
  add_definitions(-DUSE_GUI)
  set(OpenKAI_lib ${OpenKAI_lib} glfw GL m GLU GLEW)
endif()

if(USE_INFIRAY)
  add_definitions(-DUSE_INFIRAY)
endif()

if(USE_JETSON_INFERENCE)
  add_definitions(-DUSE_JETSON_INFERENCE)
  set(OpenKAI_include ${OpenKAI_include} "/usr/local/include/jetson-inference")
  set(OpenKAI_lib ${OpenKAI_lib} jetson-inference)
endif()

if(USE_MATHGL)
  add_definitions(-DUSE_MATHGL)
  set(OpenKAI_lib ${OpenKAI_lib} mgl mgl-fltk)
endif()

if(USE_OPEN3D)
  add_definitions(-DUSE_OPEN3D)
  set(Open3D_jsoncpp "/usr/include/jsoncpp" CACHE STRING "")
  set(OpenKAI_include ${OpenKAI_include} ${Open3D_jsoncpp})
  set(OpenKAI_lib ${OpenKAI_lib} Open3D)
endif()

if(USE_OPENCL)
  add_definitions(-DUSE_OPENCL)
  find_package(OpenCL REQUIRED)
  set(OpenKAI_include ${OpenKAI_include} ${OpenCL_INCLUDE_DIRS})
  set(OpenKAI_lib ${OpenKAI_lib} ${OpenCL_LIBRARIES})
endif()

if(USE_OPENCV)
  add_definitions(-DUSE_OPENCV)
  set(OpenCV_include "/usr/local/include/opencv4" CACHE STRING "")
  set(OpenCV_lib "/usr/local/lib" CACHE STRING "")
  set(OpenKAI_include ${OpenKAI_include} ${OpenCV_include})
  set(OpenKAI_libDir ${OpenKAI_libDir} ${OpenCV_lib})
  set(OpenKAI_lib ${OpenKAI_lib} opencv_core opencv_imgcodecs opencv_highgui opencv_imgproc opencv_videoio opencv_calib3d opencv_objdetect opencv_features2d opencv_dnn)
endif()

if(USE_OPENCV_CONTRIB)
  add_definitions(-DUSE_OPENCV_CONTRIB)
  set(OpenKAI_lib ${OpenKAI_lib} opencv_xobjdetect opencv_tracking opencv_aruco)
endif()

if(USE_ORBBEC)
  add_definitions(-DUSE_ORBBEC)
  set(Orbbec_include "/opt/OrbbecSDK/include" CACHE STRING "")
  set(Orbbec_lib "/opt/OrbbecSDK/lib" CACHE STRING "")
  set(OpenKAI_include ${OpenKAI_include} ${Orbbec_include})
  set(OpenKAI_libDir ${OpenKAI_libDir} ${Orbbec_lib})
  set(OpenKAI_lib ${OpenKAI_lib} OrbbecSDK)
endif()

if(USE_REALSENSE)
  add_definitions(-DUSE_REALSENSE)
  set(OpenKAI_lib ${OpenKAI_lib} realsense2)
endif()

if(USE_TF-LITE)
  add_definitions(-DUSE_TF-LITE)
  set(TFlite_src "/tensorflow" CACHE STRING "")
  set(TFlite_flatbuffersInclude "/tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers/include" CACHE STRING "")
  set(TFlite_abslInclude "/tensorflow/tensorflow/lite/tools/make/downloads/absl" CACHE STRING "")
  set(TFlite_lib "/tensorflow/tensorflow/lite/tools/make/gen/linux_aarch64/lib" CACHE STRING "")
  set(TFlite_flatbuffersLib "/tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers/build" CACHE STRING "")
#  set(TFlite_build "/tensorflow/build" CACHE STRING "")
  set(OpenKAI_include
    ${OpenKAI_include}
    ${TFlite_src}
    ${TFlite_flatbuffersInclude}
    ${TFlite_abslInclude}
  )

  set(OpenKAI_libDir
    ${OpenKAI_libDir}
    ${TFlite_lib}
    ${TFlite_flatbuffersLib}
  )

  set(OpenKAI_lib
    ${OpenKAI_lib}
    tensorflow-lite
    flatbuffers
    dl
  )
endif()

if(USE_SCEPTER_SDK)
  add_definitions(-DUSE_SCEPTER_SDK)
  set(Scepter_include "ScepterSDK/BaseSDK/Ubuntu/Include" CACHE STRING "")
  set(Scepter_lib "ScepterSDK/BaseSDK/Ubuntu/Lib" CACHE STRING "")
  set(OpenKAI_include ${OpenKAI_include} ${Scepter_include})
  set(OpenKAI_libDir ${OpenKAI_libDir} ${Scepter_lib})
  set(OpenKAI_lib ${OpenKAI_lib} Scepter_api)
endif()

if(USE_XDYNAMICS)
  add_definitions(-DUSE_XDYNAMICS)
  set(XDynamics_include "OpenKAI_exm/XDynamics_SDK/linux/xdyn_streamer_SDK_linux_V3.4.3.8/include" CACHE STRING "")
  set(XDynamics_lib "OpenKAI_exm/XDynamics_SDK/linux/xdyn_streamer_SDK_linux_V3.4.3.8/lib" CACHE STRING "")
  set(OpenKAI_include ${OpenKAI_include} ${XDynamics_include})
  set(OpenKAI_libDir ${OpenKAI_libDir} ${XDynamics_lib})
  set(OpenKAI_lib ${OpenKAI_lib} xdyn_streamer xdyn_rgbd)
endif()

if(USE_XARM)
  add_definitions(-DUSE_XARM)
  set(OpenKAI_lib ${OpenKAI_lib} xarm)
endif()

# Definitions
add_definitions(${OpenKAI_definitions})

# C/C++ settings
include_directories(${OpenKAI_include})

# Setting specific lib here
link_directories(${OpenKAI_libDir})

# Optional CUDA
if(USE_CUDA)
find_package(CUDA)
set(
	CUDA_NVCC_FLAGS
	${CUDA_NVCC_FLAGS};
    -O3 -gencode arch=compute_${CUDA_ARCH},code=sm_${CUDA_ARCH}
)
endif()

# Exe or Lib
if(BUILD_AS_LIB)

if(USE_CUDA)
cuda_add_library(OpenKAI ${OpenKAI_cpp})
else()
add_library(OpenKAI ${OpenKAI_cpp})
endif()

else()

if(USE_CUDA)
cuda_add_executable(OpenKAI ${OpenKAI_cpp})
else()
add_executable(OpenKAI ${OpenKAI_cpp})
endif()

endif() # build_as_lib

target_link_libraries(OpenKAI ${OpenKAI_lib})

# Optional ROS2 configs
if(USE_ROS)
  find_package(ament_cmake REQUIRED)
  find_package(rclcpp REQUIRED)
  find_package(std_msgs REQUIRED)
  find_package(sensor_msgs REQUIRED)
  find_package(nav_msgs REQUIRED)

  ament_target_dependencies(OpenKAI rclcpp std_msgs sensor_msgs nav_msgs)
  ament_package()
endif()

# Install
include(GNUInstallDirs)
set_target_properties(OpenKAI PROPERTIES
    VERSION ${PROJECT_VERSION})

install(TARGETS OpenKAI
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/OpenKAI
    FILES_MATCHING
    PATTERN "*.h"
)
